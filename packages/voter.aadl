-------------------------------------------------
-- Voter component block
--
-- Failure events: none
-- Inputs: computer component blocks [In1,In2,In3](data_ok, no_data, err_data)
-- Outputs: true or false              {**  status{no_data, err_data}   **}
-- States: none
-- Transfer function:
--  State (operative) out == input
--	state (failed)    out == false
-- if {[(In1 = 'no_data' or In1 = 'err_data') and (In2 = 'no_data' or In2 = 'err_data')]
--   or [(In1 = 'no_data' or In1 = 'err_data') and (In3 = 'no_data' or In3 = 'err_data')]
--	 or [(In2 = 'no_data' or In2 = 'err_data') and (In3 = 'no_data' or In3 = 'err_data')]
-- then
-- 	 out = 'no_data' // at least 2 channels failed
-- else
-- 	 out = 'data_ok'

-------------------------------------------------
package voter
public

with dataDictionary;
with ARP4761, EMV2;

system voter
	features
		In1 : in data port dataDictionary::FMS_StatusData;
		In2 : in data port dataDictionary::FMS_StatusData;
		In3 : in data port dataDictionary::FMS_StatusData;
		StatusOut : out data port dataDictionary::FMS_StatusData;
	flows
		f1 : flow sink In1;
		f2 : flow sink In2;
		f3 : flow sink In3;
		f4 : flow source StatusOut;
	annex EMV2 {**
		use types S18_ErrorLibrary;
		use behavior S18_ErrorLibrary::threeState;
		error propagations
				In1 :  in propagation {err_data, no_data};
				In2 :  in propagation {err_data, no_data};
				In3 :  in propagation {err_data, no_data};
				statusOut : out propagation {err_data, no_data};
			flows
				es1: error sink In1{err_data, no_data};
				es2: error sink In2{err_data, no_data};
				es3: error sink In3{err_data, no_data};
				es4: error source statusOut{err_data} when erroneous;
				es5: error source statusOut{no_data} when failed;
		end propagations;
		
		component error behavior
			events
				x2cpuMad : error event {err_data};
				x2cpuFault : error event {no_data};
				
			transitions
				tofailure : operative -[((In1{no_data} or In1{err_data}) and (In2{no_data} or In2{err_data})) or
										  ((In1{no_data} or In1{err_data}) and (In3{no_data} or In3{err_data})) or
										  ((In2{no_data} or In2{err_data}) and (In3{no_data} or In3{err_data}))  
						]-> failed;
				-- add a new transition for all three inputs erroneous
				toerroneous : operative -[In1{err_data} and In2{err_data} and In2{err_data}
						]->erroneous;
			end component; 
		
			properties
				EMV2::severity => ARP4761::Major applies to failed;
				ARP4761::hazards => 
				([
					description => "Flight control computer primary voter fails";
					environment => "Takeoff, Inflight, Landing";
					failure => "Unable to select valid flight control computer source";
					failureEffect => "Loss flight control";
					phases => ("Takeoff, Inflight, Landing");
					comment => "Primary flight control system failure";
				])
				applies to failed;
	**};

end voter;

system implementation voter.item
end voter.item;

end voter;